"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4542],{5016:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"Evaluation/intro","title":"Introduction","description":"It is designed to evaluate a task-oriented dialogue system by generating synthetic conversations, extracting task completion metrics, and producing a labeled synthetic dataset.","source":"@site/docs/Evaluation/intro.md","sourceDirName":"Evaluation","slug":"/Evaluation/intro","permalink":"/Agent-First-Organization/docs/Evaluation/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/ArticulateAI/Agent-First-Organization/tree/v0.0.1/docs/docs/Evaluation/intro.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"DefaultAgent","permalink":"/Agent-First-Organization/docs/Agents/DefaultAgent"},"next":{"title":"User Simulator","permalink":"/Agent-First-Organization/docs/Evaluation/UserSimulator"}}');var i=t(4848),o=t(8453);const r={},l="Introduction",c={},a=[{value:"Tutorial",id:"tutorial",level:2},{value:"Results",id:"results",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,i.jsx)(n.p,{children:"It is designed to evaluate a task-oriented dialogue system by generating synthetic conversations, extracting task completion metrics, and producing a labeled synthetic dataset."}),"\n",(0,i.jsx)(n.h2,{id:"tutorial",children:"Tutorial"}),"\n",(0,i.jsx)(n.p,{children:"Here is an example for the customer service assistant chatbot."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"First, create an API for the Agent you built. It will start an API on the default port 8000."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"python model_api.py  --input-dir ./examples/customer_service\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Fields:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--input-dir"}),": The directory that contains the needed files for the orchestrator and documents for the agents."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--model"}),": The openai model type used to generate bot response. Default is ",(0,i.jsx)(n.code,{children:"gpt-4o"}),". You could change it to other models like ",(0,i.jsx)(n.code,{children:"gpt-4o-mini"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--port"}),": The port number to start the API. Default is 8000."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Then, start the evaluation process:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:" python eval.py \\\n --model_api http://127.0.0.1:8000/eval/chat \\\n --config ./examples/customer_service_config.json \\\n --documents_dir ./examples/customer_service \\\n --output-dir ./examples/customer_service\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Fields:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--model_api"}),": The api url that you created in the previous step"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--config"}),": The path to the config file"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--documents_dir"}),": The directory that contains the generated files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--output-dir"}),": The directory to save the evaluation results"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--num_convos"}),": Number of synthetic conversations to simulate. Default is 5."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--num_goals"}),": Number of goals/tasks to simulate. Default is 5."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--max_turns"}),": Maximum number of turns per conversation. Default is 5."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"--model"}),": The openai model type used to generate bot response. Default is ",(0,i.jsx)(n.code,{children:"gpt-4o"}),". You could change it to other models like ",(0,i.jsx)(n.code,{children:"gpt-4o-mini"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"results",children:"Results"}),"\n",(0,i.jsx)(n.p,{children:"The evaluation will generate the following outputs in the specified output directory:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Simulated Synthetic Dataset (",(0,i.jsx)(n.code,{children:"simulate_data.json"}),")"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JSON file containing simulated conversations generated based on the user's objective to evaluate the task success rate."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Labeled Synthetic Dataset (",(0,i.jsx)(n.code,{children:"labeled_data.json"}),")"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JSON file containing labeled conversations generated based on the taskgraph to evaluate the NLU performance."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Goal Completion Metrics (",(0,i.jsx)(n.code,{children:"goal_completion.json"}),")"]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"JSON file summarizing task completion statistics based on the bot's ability to achieve specified goals."}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);