"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2265],{1980:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"MessageState","title":"MessageState","description":"MessageState is a data structure that represents the current snapshot of the conversation, which is developed on top of LangGraph State. It is the input parameter passed from the orchestrator to agents.","source":"@site/docs/MessageState.md","sourceDirName":".","slug":"/MessageState","permalink":"/Agent-First-Organization/docs/MessageState","draft":false,"unlisted":false,"editUrl":"https://github.com/luyunan0404/AgentOrg/tree/main/docs/docs/MessageState.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Generation","permalink":"/Agent-First-Organization/docs/Taskgraph/Generation"},"next":{"title":"Agents","permalink":"/Agent-First-Organization/docs/Agents/intro"}}');var a=t(4848),r=t(8453);const o={},i="MessageState",c={},d=[];function l(e){const s={a:"a",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.header,{children:(0,a.jsx)(s.h1,{id:"messagestate",children:"MessageState"})}),"\n",(0,a.jsxs)(s.p,{children:[(0,a.jsx)(s.code,{children:"MessageState"})," is a data structure that represents the current snapshot of the conversation, which is developed on top of ",(0,a.jsx)(s.a,{href:"https://langchain-ai.github.io/langgraph/concepts/low_level/#state",children:"LangGraph State"}),". It is the input parameter passed from the orchestrator to agents."]}),"\n",(0,a.jsxs)(s.p,{children:["Here is the implementation of a sample ",(0,a.jsx)(s.code,{children:"MessageState"}),":"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-py",children:'class MessageState(TypedDict):\n    # system configuration\n    sys_instruct: str\n    # input message\n    user_message: ConvoMessage\n    orchestrator_message: OrchestratorMessage\n    # message flow between different nodes\n    message_flow: Annotated[str, "message flow between different nodes"]\n    # final response\n    response: str\n    # task-related params\n    status: StatusEnum\n    slots: list[Slot]\n'})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"sys_instruct"}),": The system-level instructions for the orchestrator."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"user_message"}),": A ",(0,a.jsx)(s.code,{children:"ConvoMessage"})," object containing the user's query and chat history."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"orchestrator_message"}),": An ",(0,a.jsx)(s.code,{children:"OrchestratorMessage"})," object contains value and attributes of a node in ",(0,a.jsx)(s.a,{href:"/Agent-First-Organization/docs/Taskgraph/Generation",children:"TaskGraph"}),"."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"message_flow"}),': Annotated[str, "message flow between different nodes"]']}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"response"}),": The final response for the user after execution."]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"status"}),": A ",(0,a.jsx)(s.code,{children:"StatusEnum"})," object indicating whether the task has been completed"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"slots"}),": A list of ",(0,a.jsx)(s.code,{children:"Slot"})," objects to collect information during the conversation."]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Note: The field ",(0,a.jsx)(s.code,{children:"status"})," and ",(0,a.jsx)(s.code,{children:"slots"})," are mainly used for the ",(0,a.jsx)(s.a,{href:"/Agent-First-Organization/docs/Agents/DatabaseAgent",children:"DatabaseAgent"}),". For the list of ",(0,a.jsx)(s.code,{children:"Slot"})," objects, they should be defined as:"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-py",children:"class Slot(BaseModel):\n    name: str\n    type: str\n    value: str\n    description: str\n    prompt: str\n"})}),"\n",(0,a.jsx)(s.p,{children:"The name of the slot should match the column of the sample database."})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>i});var n=t(6540);const a={},r=n.createContext(a);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);